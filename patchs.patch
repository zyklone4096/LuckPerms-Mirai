diff --git a/api/src/main/java/net/luckperms/api/platform/Platform.java b/api/src/main/java/net/luckperms/api/platform/Platform.java
index 32b727316..e9afafedd 100644
--- a/api/src/main/java/net/luckperms/api/platform/Platform.java
+++ b/api/src/main/java/net/luckperms/api/platform/Platform.java
@@ -71,6 +71,7 @@ public interface Platform {
      */
     enum Type {
         BUKKIT("Bukkit"),
+        MIRAI_CONSOLE("Mirai Console"),
         BUNGEECORD("BungeeCord"),
         SPONGE("Sponge"),
         NUKKIT("Nukkit"),
diff --git a/build.gradle b/build.gradle
index e84e73039..308c69ebf 100644
--- a/build.gradle
+++ b/build.gradle
@@ -37,18 +37,7 @@ subprojects {
     }
 
     def determinePatchVersion = {
-        // get the name of the last tag
-        def tagInfo = new ByteArrayOutputStream()
-        exec {
-            commandLine 'git', 'describe', '--tags'
-            standardOutput = tagInfo
-        }
-        tagInfo = tagInfo.toString()
-
-        if (!tagInfo.contains('-')) {
-            return 0
-        }
-        return tagInfo.split("-")[1]
+        return "nobodyKnows"
     }
 
     project.ext.majorVersion = '5'
diff --git a/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java b/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java
index 3dcfcfe1e..8b3e0dc6d 100644
--- a/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java
+++ b/common/src/main/java/me/lucko/luckperms/common/api/implementation/ApiPlatform.java
@@ -50,7 +50,8 @@ public class ApiPlatform implements Platform, PluginMetadata {
 
     @Override
     public @NonNull String getApiVersion() {
-        String[] version = this.plugin.getBootstrap().getVersion().split("\\.");
+        String[] version = this.plugin.getBootstrap().getVersionLuckPerms().split("\\.");
+        version[1] = version[1].replace("-SNAPSHOT", "");
         return version[0] + '.' + version[1];
     }
 
diff --git a/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java b/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java
index 6fd381183..1d77dd5f5 100644
--- a/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java
+++ b/common/src/main/java/me/lucko/luckperms/common/command/CommandManager.java
@@ -89,6 +89,7 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 /**
  * Root command manager for the '/luckperms' command.
@@ -109,7 +110,7 @@ public class CommandManager {
     public CommandManager(LuckPermsPlugin plugin) {
         this.plugin = plugin;
         this.tabCompletions = new TabCompletions(plugin);
-        this.mainCommands = ImmutableList.<Command<?>>builder()
+        this.mainCommands = Stream.concat(ImmutableList.<Command<?>>builder()
                 .add(new UserParentCommand())
                 .add(new GroupParentCommand())
                 .add(new TrackParentCommand())
@@ -136,14 +137,28 @@ public class CommandManager {
                 .add(new DeleteTrack())
                 .add(new ListTracks())
                 .build()
-                .stream()
+                .stream(),injectedCommands())
                 .collect(ImmutableCollectors.toMap(c -> c.getName().toLowerCase(Locale.ROOT), Function.identity()));
     }
 
+    protected Stream<Command<?>> injectedCommands() {
+        return Stream.empty();
+    }
+
     public LuckPermsPlugin getPlugin() {
         return this.plugin;
     }
 
+    protected Object preExecute(Sender sender, String label, List<String> arguments) {
+        return null;
+    }
+    protected boolean shouldRenderVersion(Sender sender, boolean hasPermAny, boolean isFirstTime) {
+        return true;
+    }
+    protected boolean shouldRendNoPermsForSubCommands(Sender sender) {
+        return true;
+    }
+
     public TabCompletions getTabCompletions() {
         return this.tabCompletions;
     }
@@ -225,10 +240,25 @@ public class CommandManager {
     }
 
     private void execute(Sender sender, String label, List<String> arguments) {
+        {
+            Object result = preExecute(sender, label, arguments);
+            if (result != null) return;
+        }
         applyConvenienceAliases(arguments, true);
 
         // Handle no arguments
         if (arguments.isEmpty() || arguments.size() == 1 && arguments.get(0).trim().isEmpty()) {
+            boolean lpm_hasAnyPermission = hasPermissionForAny(sender);
+            boolean lpm_isFirstTime = false;
+            if (!lpm_hasAnyPermission) {
+                Collection<? extends Group> groups = this.plugin.getGroupManager().getAll().values();
+                if (groups.size() <= 1 && groups.stream().allMatch(g -> g.normalData().isEmpty())) {
+                    lpm_isFirstTime = true;
+                }
+            }
+
+            if (shouldRenderVersion(sender, lpm_hasAnyPermission, lpm_isFirstTime)) {
+
             sender.sendMessage(Message.prefixed(Component.text()
                     .color(NamedTextColor.DARK_GREEN)
                     .append(Component.text("Running "))
@@ -238,16 +268,21 @@ public class CommandManager {
                     .append(Message.FULL_STOP)
             ));
 
-            if (hasPermissionForAny(sender)) {
+            }
+
+            if (lpm_hasAnyPermission) {
                 Message.VIEW_AVAILABLE_COMMANDS_PROMPT.send(sender, label);
                 return;
             }
 
-            Collection<? extends Group> groups = this.plugin.getGroupManager().getAll().values();
-            if (groups.size() <= 1 && groups.stream().allMatch(g -> g.normalData().isEmpty())) {
+            if (lpm_isFirstTime) {
                 Message.FIRST_TIME_SETUP.send(sender, label, sender.getName());
             } else {
+                if (shouldRendNoPermsForSubCommands(sender)) {
+
                 Message.NO_PERMISSION_FOR_SUBCOMMANDS.send(sender);
+
+                }
             }
             return;
         }
@@ -305,14 +340,6 @@ public class CommandManager {
     }
 
     private void sendCommandUsage(Sender sender, String label) {
-        sender.sendMessage(Message.prefixed(Component.text()
-                .color(NamedTextColor.DARK_GREEN)
-                .append(Component.text("Running "))
-                .append(Component.text(AbstractLuckPermsPlugin.getPluginName(), NamedTextColor.AQUA))
-                .append(Component.space())
-                .append(Component.text("v" + this.plugin.getBootstrap().getVersion(), NamedTextColor.AQUA))
-                .append(Message.FULL_STOP)
-        ));
 
         this.mainCommands.values().stream()
                 .filter(Command::shouldDisplay)
diff --git a/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java b/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java
index ed1ed15e3..aac889424 100644
--- a/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java
+++ b/common/src/main/java/me/lucko/luckperms/common/command/access/CommandPermission.java
@@ -31,6 +31,7 @@ import me.lucko.luckperms.common.sender.Sender;
  * An enumeration of the permissions required to execute built in LuckPerms commands.
  */
 public enum CommandPermission {
+    LPM_DEBUG("lpmdebug", Type.NONE),
 
     SYNC("sync", Type.NONE),
     INFO("info", Type.NONE),
diff --git a/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java b/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java
index cc5050321..0431c49f4 100644
--- a/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java
+++ b/common/src/main/java/me/lucko/luckperms/common/command/spec/CommandSpec.java
@@ -38,6 +38,7 @@ import java.util.Locale;
  */
 @SuppressWarnings("SpellCheckingInspection")
 public enum CommandSpec {
+    LPM_DEBUG("/%s lpmdebug"),
 
     USER("/%s user <user>"),
     GROUP("/%s group <group>"),
diff --git a/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java b/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java
index 5f55c03ce..dd236005c 100644
--- a/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java
+++ b/common/src/main/java/me/lucko/luckperms/common/commands/misc/EditorCommand.java
@@ -107,6 +107,8 @@ public class EditorCommand extends SingleCommand {
 
         Message.EDITOR_START.send(sender);
 
+        sender.flush();
+
         WebEditorSession.create(holders, tracks, sender, label, plugin).open();
     }
 
diff --git a/common/src/main/java/me/lucko/luckperms/common/config/ConfigKeys.java b/common/src/main/java/me/lucko/luckperms/common/config/ConfigKeys.java
index 3a394545b..b0535005f 100644
--- a/common/src/main/java/me/lucko/luckperms/common/config/ConfigKeys.java
+++ b/common/src/main/java/me/lucko/luckperms/common/config/ConfigKeys.java
@@ -754,7 +754,7 @@ public final class ConfigKeys {
     /**
      * A list of the keys defined in this class.
      */
-    private static final List<SimpleConfigKey<?>> KEYS = KeyedConfiguration.initialise(ConfigKeys.class);
+    private static List<SimpleConfigKey<?>> KEYS = KeyedConfiguration.initialise(ConfigKeys.class);
 
     public static List<? extends ConfigKey<?>> getKeys() {
         return KEYS;
diff --git a/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManagerImpl.java b/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManagerImpl.java
index d40acfa94..a19e70f0d 100644
--- a/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManagerImpl.java
+++ b/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyManagerImpl.java
@@ -31,6 +31,7 @@ import me.lucko.luckperms.common.dependencies.relocation.Relocation;
 import me.lucko.luckperms.common.dependencies.relocation.RelocationHandler;
 import me.lucko.luckperms.common.plugin.LuckPermsPlugin;
 import me.lucko.luckperms.common.plugin.classpath.ClassPathAppender;
+import me.lucko.luckperms.common.plugin.logging.PluginLogger;
 import me.lucko.luckperms.common.storage.StorageType;
 import me.lucko.luckperms.common.util.MoreFiles;
 import net.luckperms.api.platform.Platform;
@@ -69,6 +70,7 @@ public class DependencyManagerImpl implements DependencyManager {
     private final EnumMap<Dependency, Path> loaded = new EnumMap<>(Dependency.class);
     /** A map of isolated classloaders which have been created. */
     private final Map<ImmutableSet<Dependency>, IsolatedClassLoader> loaders = new HashMap<>();
+    private final PluginLogger logger;
     /** Cached relocation handler instance. */
     private @MonotonicNonNull RelocationHandler relocationHandler = null;
 
@@ -77,6 +79,7 @@ public class DependencyManagerImpl implements DependencyManager {
         this.cacheDirectory = setupCacheDirectory(plugin);
         this.classPathAppender = plugin.getBootstrap().getClassPathAppender();
         this.loadingExecutor = plugin.getBootstrap().getScheduler().async();
+        this.logger = plugin.getLogger();
     }
 
     public DependencyManagerImpl(Path cacheDirectory, Executor executor) { // standalone pre-loader
@@ -84,6 +87,7 @@ public class DependencyManagerImpl implements DependencyManager {
         this.cacheDirectory = cacheDirectory;
         this.classPathAppender = null;
         this.loadingExecutor = executor;
+        this.logger = null;
     }
 
     private synchronized RelocationHandler getRelocationHandler() {
@@ -186,6 +190,9 @@ public class DependencyManagerImpl implements DependencyManager {
         // attempt to download the dependency from each repo in order.
         for (DependencyRepository repo : DependencyRepository.values()) {
             try {
+                if (logger != null) {
+                    logger.info("Downloading dependency: " + dependency + ", " + file.getFileName() + " from " + repo);
+                }
                 repo.download(dependency, file);
                 return file;
             } catch (DependencyDownloadException e) {
diff --git a/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyRepository.java b/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyRepository.java
index 5d58cf71b..c4cc6fd62 100644
--- a/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyRepository.java
+++ b/common/src/main/java/me/lucko/luckperms/common/dependencies/DependencyRepository.java
@@ -41,6 +41,16 @@ import java.util.concurrent.TimeUnit;
  */
 public enum DependencyRepository {
 
+    ALIYUN_MIRROR("https://maven.aliyun.com/repository/public") {
+        @Override
+        protected URLConnection openConnection(Dependency dependency) throws IOException {
+            URLConnection connection = super.openConnection(dependency);
+            connection.setConnectTimeout((int) TimeUnit.SECONDS.toMillis(5));
+            connection.setReadTimeout((int) TimeUnit.SECONDS.toMillis(10));
+            return connection;
+        }
+    },
+
     /**
      * Maven Central mirror repository.
      *
diff --git a/common/src/main/java/me/lucko/luckperms/common/locale/Message.java b/common/src/main/java/me/lucko/luckperms/common/locale/Message.java
index bd527b793..c75a82c7b 100644
--- a/common/src/main/java/me/lucko/luckperms/common/locale/Message.java
+++ b/common/src/main/java/me/lucko/luckperms/common/locale/Message.java
@@ -1583,8 +1583,7 @@ public interface Message {
                     .append(text(':'))),
             prefixed(text()
                     .color(WHITE)
-                    .append(text("     "))
-                    .append(text(plugin.getBootstrap().getServerVersion()))),
+                    .append(text(plugin.getBootstrap().versionOnCommandRender()))),
             prefixed(text()
                     .color(AQUA)
                     .append(text("-  ", WHITE))
diff --git a/common/src/main/java/me/lucko/luckperms/common/model/manager/user/UserHousekeeper.java b/common/src/main/java/me/lucko/luckperms/common/model/manager/user/UserHousekeeper.java
index c458d2440..4d55f7857 100644
--- a/common/src/main/java/me/lucko/luckperms/common/model/manager/user/UserHousekeeper.java
+++ b/common/src/main/java/me/lucko/luckperms/common/model/manager/user/UserHousekeeper.java
@@ -76,7 +76,7 @@ public class UserHousekeeper implements Runnable {
 
     public void cleanup(UUID uuid) {
         // unload users which aren't online and who haven't been online (or tried to login) recently
-        if (this.recentlyUsed.contains(uuid) || this.recentlyUsedApi.contains(uuid) || this.plugin.getBootstrap().isPlayerOnline(uuid)) {
+        if (this.recentlyUsed.contains(uuid) || this.recentlyUsedApi.contains(uuid) || uuid.getMostSignificantBits() == 0L) {
             return;
         }
 
@@ -109,4 +109,14 @@ public class UserHousekeeper implements Runnable {
             this.unit = unit;
         }
     }
+
+    public static class Access {
+        public static ExpiringSet<UUID> recentlyUsed(UserHousekeeper i) {
+            return i.recentlyUsed;
+        }
+
+        public static ExpiringSet<UUID> recentlyUsedApi(UserHousekeeper i) {
+            return i.recentlyUsedApi;
+        }
+    }
 }
diff --git a/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java b/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java
index def95b260..358beb853 100644
--- a/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java
+++ b/common/src/main/java/me/lucko/luckperms/common/plugin/bootstrap/LuckPermsBootstrap.java
@@ -230,4 +230,14 @@ public interface LuckPermsBootstrap {
         return null;
     }
 
+
+    // LuckPerms Mirai - Start
+
+    default String versionOnCommandRender() {
+        return null;
+    }
+
+    String getVersionLuckPerms();
+
+    // LuckPerms Mirai - End
 }
diff --git a/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java b/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java
index 03073647b..bb4d6cce6 100644
--- a/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java
+++ b/common/src/main/java/me/lucko/luckperms/common/sender/Sender.java
@@ -159,4 +159,12 @@ public interface Sender {
         return true;
     }
 
+    /**
+     * Flush cached message to real sender
+     *
+     * For LuckPerms-Mirai
+     */
+    default void flush() {}
+
+    default boolean isHoverEventSupported() { return false; }
 }
diff --git a/common/src/main/java/me/lucko/luckperms/common/util/ExpiringSet.java b/common/src/main/java/me/lucko/luckperms/common/util/ExpiringSet.java
index d4e12d5c3..1ec846cd3 100644
--- a/common/src/main/java/me/lucko/luckperms/common/util/ExpiringSet.java
+++ b/common/src/main/java/me/lucko/luckperms/common/util/ExpiringSet.java
@@ -27,6 +27,9 @@ package me.lucko.luckperms.common.util;
 
 import java.util.Collections;
 import java.util.Set;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
 public final class ExpiringSet {
diff --git a/common/src/main/java/me/lucko/luckperms/common/verbose/VerboseListener.java b/common/src/main/java/me/lucko/luckperms/common/verbose/VerboseListener.java
index 335e112de..bdadd8859 100644
--- a/common/src/main/java/me/lucko/luckperms/common/verbose/VerboseListener.java
+++ b/common/src/main/java/me/lucko/luckperms/common/verbose/VerboseListener.java
@@ -173,7 +173,7 @@ public class VerboseListener {
         }
 
         // just send as a raw message
-        if (this.notifiedSender.isConsole()) {
+        if (!this.notifiedSender.isHoverEventSupported()) {
             this.notifiedSender.sendMessage(component);
             return;
         }
diff --git a/settings.gradle b/settings.gradle
index 71cc2068a..111f5e035 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -21,26 +21,4 @@ include (
         'api',
         'common',
         'common:loader-utils',
-        'bukkit',
-        'bukkit:loader',
-        'bukkit-legacy',
-        'bukkit-legacy:loader',
-        'bungee',
-        'bungee:loader',
-        'fabric',
-        'neoforge',
-        'neoforge:loader',
-        'forge',
-        'forge:loader',
-        'forge:forge-api',
-        'nukkit',
-        'nukkit:loader',
-        'sponge',
-        'sponge:loader',
-        'sponge:sponge-service',
-        'sponge:sponge-service-proxy',
-        'velocity',
-        'standalone',
-        'standalone:loader',
-        'standalone:app'
 )
